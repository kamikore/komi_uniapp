"use strict";
/**
 * iconfont.css 生成器
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var axios_1 = __importDefault(require("axios"));
var mime_types_1 = __importDefault(require("mime-types"));
var postcss_1 = __importDefault(require("postcss"));
var postcss_csso_1 = __importDefault(require("postcss-csso"));
var IconfontBuilder = /** @class */ (function () {
    function IconfontBuilder() {
    }
    IconfontBuilder.build = function (filePath) {
        return __awaiter(this, void 0, void 0, function () {
            var cssContent, reg, regData, fontSrc, fontBuffer, fontContent, outCssPath, lineArray, removedFontCss, fontFamily, compressCss, fd;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.src) {
                            console.log('请输入线上的 Font class 链接');
                            console.log('例如：npm run if //at.alicdn.com/t/font_922838_rcjsxjh53np.css');
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, axios_1.default
                                .get("https:" + process.argv[2])
                                .then(function (res) { return res.data; })
                            // 找到字体引入 拿到链接
                        ];
                    case 1:
                        cssContent = _a.sent();
                        reg = /url\('(\/\/at\.alicdn\.com\/t\/font_[a-z0-9_]+\.woff)\?t=\d+'\) format\('woff'\)/;
                        regData = reg.exec(cssContent);
                        if (!regData) {
                            console.log('读取字体链接失败');
                            return [2 /*return*/];
                        }
                        fontSrc = regData[1] + "?t=" + new Date().getTime();
                        return [4 /*yield*/, axios_1.default
                                .get("https:" + fontSrc, {
                                responseType: 'arraybuffer'
                            })
                                .then(function (res) { return res.data; })
                            // * 字体 base64
                        ];
                    case 2:
                        fontBuffer = _a.sent();
                        fontContent = fontBuffer.toString('base64');
                        outCssPath = filePath;
                        lineArray = cssContent.toString().split('\n');
                        removedFontCss = lineArray.slice(6, lineArray.length - 1).join('\n');
                        fontFamily = "@font-face {\n      font-family: 'iconfont';\n      src: url('data:" + mime_types_1.default.lookup('woff') + ";charset=utf-8;base64,{fontBase64}') format('woff');\n      font-weight: normal;\n      font-style: normal;\n      font-display: swap;\n   ";
                        return [4 /*yield*/, (0, postcss_1.default)([postcss_csso_1.default])
                                .process("" + fontFamily + removedFontCss, {
                                from: undefined
                            })
                                .then(function (result) { return result.css.replace(/\{fontBase64\}/, fontContent); })];
                    case 3:
                        compressCss = _a.sent();
                        if (filePath) {
                            fd = fs_1.default.openSync(outCssPath, 'w');
                            fs_1.default.writeSync(fd, compressCss);
                            fs_1.default.closeSync(fd);
                            console.log("\u751F\u6210\u6210\u529F\uFF1A" + outCssPath + "\n");
                        }
                        return [2 /*return*/, Promise.resolve({
                                font: fontFamily.replace(/\{fontBase64\}/, fontContent),
                                icon: removedFontCss,
                                compress: compressCss
                            })];
                }
            });
        });
    };
    IconfontBuilder.src = process.argv[2];
    return IconfontBuilder;
}());
exports.default = IconfontBuilder;
